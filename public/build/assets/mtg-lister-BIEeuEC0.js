function f(u){return new Promise((l,w)=>{u.onsuccess=t=>{l(t.target.result)},u.onerror=t=>{console.error(t),w(t.target.error||t)}})}async function k(u,l,w){const t=await new Promise(e=>{const r=window.indexedDB.open(u,l);r.onsuccess=a=>{e(a.target.result)},r.onupgradeneeded=a=>{const o=a.target.result;o.onerror=d=>{var s;console.error((s=d.target.error)==null?void 0:s.message)},w(o)}});return t.onerror=e=>{var r;console.error((r=e.target.error)==null?void 0:r.message)},t}function v(){function u(s){const{set:i,num:c}=s;return`${i} ${c}`}function l(s){const{set:i,num:c}=s;return{set:i,num:c}}function w(){const s=k("mtg-lister",1,n=>{n.createObjectStore("cards",{keyPath:"setNum"}),n.createObjectStore("cardList",{autoIncrement:!0}).createIndex("listName","listName",{unique:!1}),n.createObjectStore("options",{keyPath:"name"})}),i={async save(n){n.setNum=n.setNum||u(n),n.savedAt=Date.now(),await f((await s).transaction(["cards"],"readwrite").objectStore("cards").put(n))},async get(n){try{return f((await s).transaction(["cards"]).objectStore("cards").get(u(n)))}catch{return null}}};function c(n){var y;const{key:h=null,listName:m=null,search:g=null,foil:C=!1}=n;return{key:h||void 0,listName:m||void 0,search:g?{q:g.q,results:(y=g.results)==null?void 0:y.map(l)}:void 0,card:n.card?l(n.card):null,foil:C}}return{cards:i,lists:{async getLists(){return f((await s).transaction(["cardList"]).objectStore("cardList").index("listName").getAllKeys())},async getList(n=""){return f((await s).transaction(["cardList"]).objectStore("cardList").index("listName").getAll(n))},async addRow(n,h=""){n=c(n),n.listName=h;const m=(await s).transaction(["cardList"],"readwrite").objectStore("cardList");return n.key=await f(m.add(n)),await f(m.put(n,n.key)),n},async updateRow(n){n=c(n),await f((await s).transaction(["cardList"],"readwrite").objectStore("cardList").put(n,n.key))},async removeRow(n){await f((await s).transaction(["cardList"],"readwrite").objectStore("cardList").delete(n))},async clearList(n=""){const h=await s;return new Promise(m=>{const C=h.transaction(["cardList"],"readwrite").objectStore("cardList").index("listName");C.openCursor(IDBKeyRange.only(n)).onsuccess=y=>{const L=y.target.result;L?(L.delete(),L.continue()):m()}})}},options:{async get(n,h=null){const m=await f((await s).transaction(["options"]).objectStore("options").get(n));return(m==null?void 0:m.value)||h},async set(n,h){await f((await s).transaction(["options"],"readwrite").objectStore("options").put({name:n,value:h}))}}}}const t=w(),e=Alpine.reactive({get(s){return e[u(s)]||null},set(s){return t.cards.save(this.remember(s))},remember(s){return s&&(e[u(s)]=s),s},async recall(s){return this.get(s)||this.remember(await t.cards.get(s))}});async function r(){return t.lists.getLists()}function a(s){const{set:i,num:c}=s;return{set:i,num:c,get card(){return e.get(s)}}}function o(s){var i;return{...s,search:s.search?{q:s.search.q,results:(i=s.search.results)==null?void 0:i.map(a)}:void 0,card:s.card?a(s.card):null,error:null,get hasError(){return!!this.error}}}function d(s){return{rows:[],async add(i){const c=await t.lists.addRow(i,s),p=o(c),b=this.rows.push(p);return this.rows[b-1]},async remove(i){return this.rows.splice(this.rows.indexOf(i),1),this.removeRowRecord(i)},async removeRowRecord(i){return t.lists.removeRow(i.key)},async clear(){this.rows=[],await t.lists.clearList(s)},async update(i){return await t.lists.updateRow(i)},get byNew(){return this.rows.toReversed()},async populate(){await Promise.allSettled((await t.lists.getList(s)).map(async i=>{var c;i.card?await e.recall(i.card):(c=i.search)!=null&&c.results&&await Promise.allSettled(i.search.results.map(async p=>{await e.recall(p)})),this.rows.push(o(i))}))}}}return{cards:e,cardPop:a,getLists:r,list:d}}document.addEventListener("alpine:init",()=>{const u=()=>(t=>t[Math.floor(Math.random()*t.length)])(["eld 299","fdn 128","snc 425","woe 287","ncc 13"]),l=v(),w=kat.rateLimitedService("https://api.scryfall.com/",100);Alpine.data("mtgLister",()=>({search:"",cardData:l.cards,isFoil:!1,list:l.list(""),lists:[],placeholder:u(),preview:null,select:null,hasSetsData:!!mtgSets.length,rowActionIndex:0,setCodeLock:null,async init(){this.lists=await l.getLists(),await this.list.populate()},get actionRow(){return this.list.byNew[this.rowActionIndex]||null},get actionRowKey(){var t;return(t=this.actionRow)==null?void 0:t.key},get setCodeHint(){var t;if(this.action.usePrev){if(this.action.do==="+")return this.action.match.card.set.toUpperCase();if(this.action.do==="l+")return this.action.setCode.toUpperCase()}return(t=this.setCodeLock)==null?void 0:t.toUpperCase()},setByCode(t){if(this.hasSetsData)try{return mtgSets.find(e=>e.code===t.toLowerCase())||null}catch(e){return console.error(t,e),null}return null},get lockedSetPlaceholder(){return this.setCodeLock?String(Math.floor(Math.random()*this.lockedSet.card_count)+1):this.placeholder},get lockedSet(){return this.setCodeLock?this.setByCode(this.setCodeLock):null},setName(t){const e=this.setByCode(t);return e?e.name:t.toUpperCase()},get resolvedCards(){return this.list.rows.filter(e=>{var r;return(r=e.card)==null?void 0:r.card})},get distinctCards(){const t=this.resolvedCards,e={},r=[];return t.forEach(a=>{const o=`${a.card.set}:${a.card.num}:${a.foil?"foil":"-"}`;e[o]!==void 0?r[e[o]].count++:(e[o]=r.length,r.push({count:1,name:a.card.card.name,set:a.card.set,num:a.card.num,foil:a.foil}))}),r},get csvDownload(){return encodeURI(`data:text/csv;charset=utf-8,Count,Name,Edition,Collector Number,Foil\r
`+this.distinctCards.map(t=>[t.count,`"${t.name.replace('"','""')}"`,t.set,t.num,t.foil?"foil":""].join(",")).join(`\r
`))},get csvFileName(){const t=this.resolvedCards.length;if(!t)return"mtg-list_empty.csv";const e=this.distinctCards[0].name.replace(/[^a-z0-9]/gi,"_").toLowerCase();return`mtg-list_${t}_${e}.csv`},matchCardRef(t){var s,i;if(!this.hasSetsData)return null;const e=t.split(" ");if(e.length===1&&this.setCodeLock&&e.unshift(this.setCodeLock),e.length!==2)return null;const r=e[0]==="<";if(r)if((s=this.actionRow)!=null&&s.set)e[0]=this.actionRow.set;else return null;const a=this.setByCode(e[0]==="<"&&((i=this.actionRow)!=null&&i.set)?this.actionRow.set:e[0]);if(!a)return null;const o=e[1].match(/(?<number>\d{1,4})(?<foil>f?)/i);if(!o)return null;const d=Number(o.groups.number);return d>a.card_count?null:{card:{set:a.code,num:d},foil:!!o.groups.foil,usePrev:r}},get action(){var o,d;const t=this.actionRow,e=(o=t==null?void 0:t.card)==null?void 0:o.card,r=this.search.trim().toLowerCase();if(!r)return e||(d=t==null?void 0:t.search)!=null&&d.results?{do:"++",row:t}:{do:null};if(r.length===1)switch(r){case"v":if(t)return{do:e?"vC":"vR",row:t};break;case"f":if(e)return{do:"f",row:t};break;case"<":if(this.setCodeLock)return{do:"l-"};if(e)return{do:"l+",setCode:e.set,usePrev:!0};break;case"x":if(t)return{do:"x",row:t};break;case"?":return{do:"?"}}if(r.slice(0,1)==="<"&&this.setByCode(r.slice(1)))return{do:"l+",setCode:r.slice(1)};const a=this.matchCardRef(r);if(a){const{card:s,foil:i,usePrev:c}=a;return{do:"+",match:{card:s,foil:i},usePrev:c}}return this.setCodeLock?{do:"s",search:`${r} set:${this.setCodeLock}`}:{do:"s",search:r}},get actionLabel(){switch(this.action.do){case null:case"s":return"Search Card";case"+":return"Add Card";case"++":return"Add Another";case"vC":return"View Card";case"vR":return"View Results";case"f":return"Toggle Foil";case"l+":return"Lock Set: "+this.action.setCode;case"l-":return"Unlock Set";case"x":return"Remove Row";case"?":return"Open Help"}},padCardNum(t){const e=this.setByCode(t.set),r=t.num+"";return e?r.padStart((e.card_count+"").length,"0"):r},mainAction(t){const e=this.action;switch(e.do){case null:return;case"+":this.fetchCard(e.match.card,e.match.foil).then();break;case"s":this.searchCard(e.search).then();break;case"++":this.addAnother(e.row).then();break;case"vC":t("view-card",e.row.card.card);break;case"vR":t("view-results",e.row);break;case"f":this.updateRow(e.row,{foil:!e.row.foil}).then();break;case"l+":this.setCodeLock=e.setCode;break;case"l-":this.setCodeLock=null;break;case"x":this.list.remove(e.row).then();break;case"?":t("open-help");break}this.resetInputs(),t("reset-set-search")},async fetchCard(t,e){const r=await this.list.add({card:t,foil:e});let a=r.card.card;a||(a=await l.cards.recall(r.card));const o=1e3*60*60*24*7;if(!a||a.savedAt<Date.now()-o)try{a=this.prepareScryfallCard(await this.scryfall(`cards/${t.set}/${t.num}`)),await l.cards.set(a)}catch(d){r.error=d,console.error(r),await this.list.removeRowRecord(r)}},async searchCard(t){const e=await this.list.add({search:{q:t}}),r=new URLSearchParams;r.set("q",t),r.set("unique","prints"),r.set("order","released");try{let a=await this.scryfall(`cards/search?${r.toString()}`);a=await Promise.all(a.data.map(o=>(o=this.prepareScryfallCard(o),l.cards.set(o).then(()=>l.cardPop(o))))),a.length===1?await this.updateRow(e,{card:a[0]}):await this.updateRow(e,{results:a})}catch(a){e.error=a,console.error(e),await this.list.removeRowRecord(e)}},addAnother(t){const{search:e=null,card:r=null,foil:a}=t;return this.list.add({search:e,card:r,foil:a})},async updateRow(t,{card:e=null,results:r=null,foil:a=null}){e?(t.card=e,t.search=void 0):r&&(t.search.results=r),a&&(t.foil=a),await this.list.update(t)},async removeRow(t){await this.list.remove(t)},async clearList(){window.confirm("Are you sure you want to remove all cards from the list?")&&await this.list.clear()},resetInputs(){this.search="",this.rowActionIndex=0,this.placeholder=u()},async scryfall(...t){const e=await w(...t);if(!e.ok)throw new Error(`Response status: ${e.status}`);return await e.json()},prepareScryfallCard(t){const{name:e,set:r,collector_number:a,finishes:o,image_status:d,image_uris:s}=t,i=s.png||null;return{name:e,set:r,num:a,finishes:o,imageStatus:d,imageUri:i}}}))});
